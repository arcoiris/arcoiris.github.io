<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Associations | Typing Is Good for You]]></title>
  <link href="http://arcoiris.github.io/blog/categories/associations/atom.xml" rel="self"/>
  <link href="http://arcoiris.github.io/"/>
  <updated>2014-08-07T16:19:34-04:00</updated>
  <id>http://arcoiris.github.io/</id>
  <author>
    <name><![CDATA[Deborah]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Associations: Has_many :through vs Has_and_belongs_to_many]]></title>
    <link href="http://arcoiris.github.io/blog/2014/08/01/associations-has-many-through-vs-has-and-belongs-to-many/"/>
    <updated>2014-08-01T15:52:00-04:00</updated>
    <id>http://arcoiris.github.io/blog/2014/08/01/associations-has-many-through-vs-has-and-belongs-to-many</id>
    <content type="html"><![CDATA[<p>In Rails, there are two ways to express many-to-many associations. The two forms of expressing a many-to-many association are as follows: (given two models, Post and Category)</p>

<p>models/categories.rb</p>

<pre><code>    has_and_belongs_to_many :posts
</code></pre>

<p>models/posts.rb</p>

<pre><code>    has_and_belongs_to_many :categories
</code></pre>

<hr />

<p>(join table)</p>

<pre><code>class CreatePostCategories &lt; ActiveRecord::Migration 
  def change
    create_table :post_categories do |t|
      t.integer :post_id 
      t.integer :category_id 
      t.timestamps
    end
  end
end
</code></pre>

<p>models/post.rb</p>

<pre><code>has_many :post_categories
has_many :categories, through: :post_categories
</code></pre>

<p>models/categories.rb</p>

<pre><code>has_many :post_categories 
has_many :posts, through: :post_categories
</code></pre>

<h3>has_and_belongs_to_many</h3>

<p>When you use has_and_belongs_to_many, you don&rsquo;t create an explicit join table, as rails creates an implicit table for you at the database level. It&rsquo;s a matter of plug in and go.</p>

<h3>has_many :through + join_table</h3>

<p>When using has_many :through in order to express a many-to-many relationship, you must explicitly create a join table. In the above example, PostCategories is the join table. You can add any attributes to the join table. Since you can extend the join table, it is best practice to use has_many :through + join table.</p>

<p><strong>Conclusion:</strong> has_many :through is to be used the majority of the time, based on its extensibility.</p>

<p><strong>Further Reading?</strong> <a href="http://api.rubyonrails.org/v4.1.1/classes/ActiveRecord/Associations/ClassMethods.html">Rails associations api doc</a></p>
]]></content>
  </entry>
  
</feed>
